--==============================================================================
-- Debug
--==============================================================================

local printBasicBlocks = false


--==============================================================================
-- Dependency
--==============================================================================

local OperationsCode  = require "operations_code"
local Registers       = require "machine_code/registers"


--==============================================================================
-- Data Structure
--==============================================================================

local Class = {}

--  list of operations code
--  {
--    [name] = $number,
--  }
local operations_code = OperationsCode.GetList()



--==============================================================================
-- Private Methods
--==============================================================================

--DumpFunction:
--  Parameters:
--    [1] $       - Desired output
--    [2] 
--    [3] $table
--  Return:
function Class.DumpFunction (output, header, instructions)
  if (_DEBUG) then print("MCG :: DumpFunction") end
  -- COMPLETE
end

--DumpGlobal:
--  Parameters:
--    [1] $       - Desired output
--    [2] $string - Variable name
--  Return:
function Class.DumpGlobal (output, var)
  if (_DEBUG) then print("MCG :: DumpGlobal") end
  assert(var)
  -- MUST REDO FORMATTING
  output:write(string.format('glob %s\n', var))
end

--DumpString:
--  Parameters:
--    [1] $       - Desired output
--    [2] $string - Variable name
--    [3] $string - Literal string
--  Return:
function Class.DumpString (output, var, str)
  if (_DEBUG) then print("MCG :: DumpString") end
  assert(var)
  assert(str)
  -- MUST REDO FORMATTING
  output:write(string.format('stri %s = %s\n', var, str))
end

--Error: Stop class execution and generate error message
--  Parameters:
--    [1] $string - 
--  Return:
function Class.Error (msg)
  if (_DEBUG) then print("MCG :: Error") end
  local str = string.format("machine code generator error: %s", msg or "")
  error(str, 0)
end

--GenBasicBlock: Receives a list of instructions and split it into basic blocks
--  Parameters:
--    [1] $table  - list of function instructions generated by intermediate code
--  Return:
--    [1] $table = {
--          [1 to N] = {    - list of basic blocks
--        }
function Class.GenBasicBlock (func)
  if (_DEBUG) then print("MCG :: GenBasicBlock") end
  local t = {}
  local enum_block = 0
  local next_is_block = false
  for enum_inst, inst in ipairs(func) do
    if (next_is_block) then
      next_is_block = false
      enum_block = enum_block + 1
      t[enum_block] = {}
      table.insert(t[enum_block], inst)
    elseif (enum_inst == 1) then
      enum_block = enum_block + 1
      t[enum_block] = {}
      table.insert(t[enum_block], inst)
    elseif (inst.code == operations_code["LABEL"]) then
      enum_block = enum_block + 1
      t[enum_block] = {}
      table.insert(t[enum_block], inst)
    elseif (inst.code == operations_code["GOTO"] or inst.code == operations_code["IFFALSEGOTO"] or inst.code == operations_code["IFGOTO"]) then
      next_is_block = true
      table.insert(t[enum_block], inst)
    else
      table.insert(t[enum_block], inst)
    end
  end
  if (printBasicBlocks) then
    util.TablePrint(t)
  end
  return t
end

--GenMachineBlock:
--  Parameters:
--    [1] $table  - Table generated by 'GenBasicBlock' function
--  Return:
function Class.GenMachineBlock (basic_blocks)
  if (_DEBUG) then print("MCG :: GenMachineBlock") end
  assert(type(basic_blocks) == "table")
  local t = {}
  for _, block in ipairs(basic_blocks) do
    Registers.New(block)

    -- create list
  end
  return t
end


--==============================================================================
-- Public Methods
--==============================================================================

--Open: Write a 'path'.o file with machine code.
--  Parameters:
--    [1] $string   - Path of exit file. Extension will be converted to '.o'
--    [2] $table    - Struct of program builded by intermediate code.
--  Return:
--    [1] $boolean  - false if found any problem, true otherwise
--    [2] $string   - only when [1] is false, informing which error occurs
function Class.Open (path, intermediate_code)
  if (_DEBUG) then print("MCG :: Open") end
  assert(path)
  assert(type(intermediate_code) == "table")
  local ok, msg = pcall(function ()
    local f = io.open(util.FileRemoveExtension(path) .. ".o", "w")
    if (not f) then
      Class.Error(string.format("output file '%s' could not be opened"), path)
    end
    for _, string in ipairs(intermediate_code.strings) do
      Class.DumpString(f, string.var, string.str)
    end
    for _, global in ipairs(intermediate_code.globals) do
      Class.DumpGlobal(f, global)
    end
    for _, func in ipairs(intermediate_code.functions) do
      local basic_blocks = Class.GenBasicBlock(func)
      local machine_block = Class.GenMachineBlock(basic_blocks)
      Class.DumpFunction(f, func.header, machine_block)
    end
  end)
  if (not ok) then
    return false, msg
  end
  return true
end


--==============================================================================
-- Return
--==============================================================================

return Class
